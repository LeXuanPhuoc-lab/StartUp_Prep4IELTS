// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Prep4IELTS.Data.Context;

#nullable disable

namespace Prep4IELTS.Data.Migrations
{
    [DbContext(typeof(Prep4IeltsContext))]
    partial class Prep4IeltsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Prep4IELTS.Data.Entities.CloudResource", b =>
                {
                    b.Property<int>("CloudResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cloud_resource_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CloudResourceId"));

                    b.Property<int?>("Bytes")
                        .HasColumnType("int")
                        .HasColumnName("bytes");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    b.Property<string>("PublicId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("public_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("url");

                    b.HasKey("CloudResourceId")
                        .HasName("PK_CloudResource");

                    b.ToTable("Cloud_Resource", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("comment_date");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_comment_id");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("test_id");

                    b.Property<int>("TotalChildNode")
                        .HasColumnType("int")
                        .HasColumnName("total_child_node");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("CommentId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.Flashcard", b =>
                {
                    b.Property<int>("FlashcardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("flashcard_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlashcardId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasColumnName("isPublic");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("title");

                    b.Property<int?>("TotalView")
                        .HasColumnType("int")
                        .HasColumnName("total_view");

                    b.Property<int?>("TotalWords")
                        .HasColumnType("int")
                        .HasColumnName("total_words");

                    b.HasKey("FlashcardId");

                    b.ToTable("Flashcard", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.FlashcardDetail", b =>
                {
                    b.Property<int>("FlashcardDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("flashcard_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlashcardDetailId"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("definition");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Example")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("example");

                    b.Property<int>("FlashcardId")
                        .HasColumnType("int")
                        .HasColumnName("flashcard_id");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("image_url");

                    b.Property<string>("WordForm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("word_form");

                    b.Property<string>("WordPronunciation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("word_pronunciation");

                    b.Property<string>("WordText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("word_text");

                    b.HasKey("FlashcardDetailId")
                        .HasName("PK_FlashcardDetail");

                    b.HasIndex("FlashcardId");

                    b.ToTable("Flashcard_Detail", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.PartitionHistory", b =>
                {
                    b.Property<int>("PartitionHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("partition_history_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartitionHistoryId"));

                    b.Property<double?>("AccuracyRate")
                        .HasColumnType("float")
                        .HasColumnName("accuracy_rate");

                    b.Property<int>("TestHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("test_history_id");

                    b.Property<string>("TestSectionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("test_section_name");

                    b.Property<int>("TestSectionPartId")
                        .HasColumnType("int")
                        .HasColumnName("test_section_part_id");

                    b.Property<int>("TotalQuestion")
                        .HasColumnType("int")
                        .HasColumnName("total_question");

                    b.Property<int?>("TotalRightAnswer")
                        .HasColumnType("int")
                        .HasColumnName("total_right_answer");

                    b.Property<int?>("TotalSkipAnswer")
                        .HasColumnType("int")
                        .HasColumnName("total_skip_answer");

                    b.Property<int?>("TotalWrongAnswer")
                        .HasColumnType("int")
                        .HasColumnName("total_wrong_answer");

                    b.HasKey("PartitionHistoryId")
                        .HasName("PK_PartitionHistory");

                    b.HasIndex("TestHistoryId");

                    b.HasIndex("TestSectionPartId");

                    b.ToTable("Partition_History", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.PartitionTag", b =>
                {
                    b.Property<int>("PartitionTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("partition_tag_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartitionTagId"));

                    b.Property<string>("PartitionTagDesc")
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("partition_tag_desc");

                    b.HasKey("PartitionTagId")
                        .HasName("PK_PartitionTag");

                    b.ToTable("Partition_Tag", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentTypeId"));

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("payment_method");

                    b.HasKey("PaymentTypeId")
                        .HasName("PK_PaymentType");

                    b.ToTable("Payment_Type", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.PremiumPackage", b =>
                {
                    b.Property<int>("PremiumPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("premium_package_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PremiumPackageId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<int>("DurationInMonths")
                        .HasColumnType("int")
                        .HasColumnName("duration_in_months");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("PremiumPackageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("premium_package_name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.HasKey("PremiumPackageId")
                        .HasName("PK_PremiumPackage");

                    b.ToTable("Premium_Package", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<bool>("IsMultipleChoice")
                        .HasColumnType("bit")
                        .HasColumnName("isMultipleChoice");

                    b.Property<string>("QuestionAnswerExplanation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("question_answer_explanation");

                    b.Property<string>("QuestionDesc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("question_desc");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int")
                        .HasColumnName("question_number");

                    b.Property<int>("TestSectionPartId")
                        .HasColumnType("int")
                        .HasColumnName("test_section_part_id");

                    b.HasKey("QuestionId");

                    b.HasIndex("TestSectionPartId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.QuestionAnswer", b =>
                {
                    b.Property<int>("QuestionAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("question_answer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionAnswerId"));

                    b.Property<string>("AnswerDisplay")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("answer_display");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("answer_text");

                    b.Property<bool>("IsTrue")
                        .HasColumnType("bit")
                        .HasColumnName("is_true");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.HasKey("QuestionAnswerId")
                        .HasName("PK_QuestionAnswer");

                    b.HasIndex("QuestionId");

                    b.ToTable("Question_Answer", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.ScoreCalculation", b =>
                {
                    b.Property<int>("ScoreCalculationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("score_calculation_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScoreCalculationId"));

                    b.Property<string>("BandScore")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("band_score");

                    b.Property<int>("FromTotalRight")
                        .HasColumnType("int")
                        .HasColumnName("from_total_right");

                    b.Property<string>("TestType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("test_type");

                    b.Property<int>("ToTotalRight")
                        .HasColumnType("int")
                        .HasColumnName("to_total_right");

                    b.HasKey("ScoreCalculationId")
                        .HasName("PK_ScoreCalculation");

                    b.ToTable("Score_Calculation", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.SpeakingPart", b =>
                {
                    b.Property<int>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("part_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("PartDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("part_description");

                    b.Property<int>("PartNumber")
                        .HasColumnType("int")
                        .HasColumnName("part_number");

                    b.Property<int>("TopicSampleId")
                        .HasColumnType("int")
                        .HasColumnName("topic_sample_id");

                    b.HasKey("PartId")
                        .HasName("PK_SpeakingPart");

                    b.HasIndex("TopicSampleId");

                    b.ToTable("Speaking_Part", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.SpeakingTopic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("topic_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("topic_name");

                    b.HasKey("TopicId")
                        .HasName("PK_SpeakingTopic");

                    b.ToTable("Speaking_Topic", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.SpeakingTopicSample", b =>
                {
                    b.Property<int>("TopicSampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("topic_sample_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicSampleId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int>("TopicId")
                        .HasColumnType("int")
                        .HasColumnName("topic_id");

                    b.Property<string>("TopicSampleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("topic_sample_name");

                    b.HasKey("TopicSampleId")
                        .HasName("PK_SpeakingTopicSample");

                    b.HasIndex("TopicId");

                    b.ToTable("Speaking_Topic_Sample", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.SystemRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId")
                        .HasName("PK_SystemRole");

                    b.ToTable("System_Role", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("tag_name");

                    b.HasKey("TagId");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.Test", b =>
                {
                    b.Property<Guid>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("test_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit")
                        .HasColumnName("is_draft");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    b.Property<int>("TestCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("test_category_id");

                    b.Property<string>("TestTitle")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("test_title");

                    b.Property<string>("TestType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("test_type");

                    b.Property<int?>("TotalEngaged")
                        .HasColumnType("int")
                        .HasColumnName("total_engaged");

                    b.Property<int>("TotalQuestion")
                        .HasColumnType("int")
                        .HasColumnName("total_question");

                    b.Property<int?>("TotalSection")
                        .HasColumnType("int")
                        .HasColumnName("total_section");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("TestId");

                    b.HasIndex("TestCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Test", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.TestCategory", b =>
                {
                    b.Property<int>("TestCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("test_category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestCategoryId"));

                    b.Property<string>("TestCategoryName")
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("test_category_name");

                    b.HasKey("TestCategoryId")
                        .HasName("PK_TestCategory");

                    b.ToTable("Test_Category", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.TestGrade", b =>
                {
                    b.Property<int>("TestGradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("test_grade_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestGradeId"));

                    b.Property<string>("GradeStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("grade_status");

                    b.Property<string>("InputedAnswer")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("inputed_answer");

                    b.Property<int>("PartitionHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("partition_history_id");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int")
                        .HasColumnName("question_number");

                    b.Property<string>("RightAnswer")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("right_answer");

                    b.HasKey("TestGradeId")
                        .HasName("PK_TestGrade");

                    b.HasIndex("PartitionHistoryId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Test_Grade", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.TestHistory", b =>
                {
                    b.Property<int>("TestHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("test_history_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestHistoryId"));

                    b.Property<double?>("AccuracyRate")
                        .HasColumnType("float")
                        .HasColumnName("accuracy_rate");

                    b.Property<string>("BandScore")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("band_score");

                    b.Property<bool>("IsFull")
                        .HasColumnType("bit")
                        .HasColumnName("isFull");

                    b.Property<int?>("ScoreCalculationId")
                        .HasColumnType("int")
                        .HasColumnName("score_calculation_id");

                    b.Property<DateTime>("TakenDate")
                        .HasColumnType("datetime")
                        .HasColumnName("taken_date");

                    b.Property<int>("TestCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("test_category_id");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("test_id");

                    b.Property<string>("TestType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("test_type");

                    b.Property<int>("TotalCompletionTime")
                        .HasColumnType("int")
                        .HasColumnName("total_completion_time");

                    b.Property<int>("TotalQuestion")
                        .HasColumnType("int")
                        .HasColumnName("total_question");

                    b.Property<int?>("TotalRightAnswer")
                        .HasColumnType("int")
                        .HasColumnName("total_right_answer");

                    b.Property<int?>("TotalSkipAnswer")
                        .HasColumnType("int")
                        .HasColumnName("total_skip_answer");

                    b.Property<int?>("TotalWrongAnswer")
                        .HasColumnType("int")
                        .HasColumnName("total_wrong_answer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("TestHistoryId")
                        .HasName("PK_TestHistory");

                    b.HasIndex("ScoreCalculationId");

                    b.HasIndex("TestCategoryId");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("Test_History", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.TestSection", b =>
                {
                    b.Property<int>("TestSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("test_section_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestSectionId"));

                    b.Property<int?>("CloudResourceId")
                        .HasColumnType("int")
                        .HasColumnName("cloud_resource_id");

                    b.Property<string>("ReadingDesc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reading_desc");

                    b.Property<string>("SectionTranscript")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("section_transcript");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("test_id");

                    b.Property<string>("TestSectionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("test_section_name");

                    b.Property<int>("TotalQuestion")
                        .HasColumnType("int")
                        .HasColumnName("total_question");

                    b.HasKey("TestSectionId")
                        .HasName("PK_TestSection");

                    b.HasIndex("CloudResourceId");

                    b.HasIndex("TestId");

                    b.ToTable("Test_Section", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.TestSectionPartition", b =>
                {
                    b.Property<int>("TestSectionPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("test_section_part_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestSectionPartId"));

                    b.Property<int?>("CloudResourceId")
                        .HasColumnType("int")
                        .HasColumnName("cloud_resource_id");

                    b.Property<bool>("IsVerticalLayout")
                        .HasColumnType("bit")
                        .HasColumnName("is_vertical_layout");

                    b.Property<string>("PartitionDesc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("partition_desc");

                    b.Property<string>("PartitionImage")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("partition_image");

                    b.Property<int>("PartitionTagId")
                        .HasColumnType("int")
                        .HasColumnName("partition_tag_id");

                    b.Property<int>("TestSectionId")
                        .HasColumnType("int")
                        .HasColumnName("test_section_id");

                    b.HasKey("TestSectionPartId")
                        .HasName("PK_TestSectionPartition");

                    b.HasIndex("CloudResourceId");

                    b.HasIndex("PartitionTagId");

                    b.HasIndex("TestSectionId");

                    b.ToTable("Test_Section_Partition", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("payment_amount");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("payment_type_id");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("transaction_date");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("transaction_status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<int>("UserPremiumPackageId")
                        .HasColumnType("int")
                        .HasColumnName("user_premium_package_id");

                    b.HasKey("TransactionId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserPremiumPackageId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("AvatarImage")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("avatar_image");

                    b.Property<string>("ClerkId")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("clerk_id");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("TargetScore")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("target_score");

                    b.Property<DateTime?>("TestTakenDate")
                        .HasColumnType("datetime")
                        .HasColumnName("test_taken_date");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "ClerkId" }, "UQ__User__EA2ECA19E6DC35F4")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.UserFlashcard", b =>
                {
                    b.Property<int>("UserFlashcardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_flashcard_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserFlashcardId"));

                    b.Property<int>("FlashcardId")
                        .HasColumnType("int")
                        .HasColumnName("flashcard_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("UserFlashcardId")
                        .HasName("PK_UserFlashcard");

                    b.HasIndex("FlashcardId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Flashcard", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.UserFlashcardProgress", b =>
                {
                    b.Property<int>("UserFlashcardProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_flashcard_progress_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserFlashcardProgressId"));

                    b.Property<int>("FlashcardDetailId")
                        .HasColumnType("int")
                        .HasColumnName("flashcard_detail_id");

                    b.Property<string>("ProgressStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("progress_status");

                    b.Property<int>("UserFlashcardId")
                        .HasColumnType("int")
                        .HasColumnName("user_flashcard_id");

                    b.HasKey("UserFlashcardProgressId")
                        .HasName("PK_UserFlashcardProgress");

                    b.HasIndex("FlashcardDetailId");

                    b.HasIndex("UserFlashcardId");

                    b.ToTable("User_Flashcard_Progress", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.UserPremiumPackage", b =>
                {
                    b.Property<int>("UserPremiumPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_premium_package_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPremiumPackageId"));

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expire_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int>("PremiumPackageId")
                        .HasColumnType("int")
                        .HasColumnName("premium_package_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("UserPremiumPackageId")
                        .HasName("PK_UserPremiumPackage");

                    b.HasIndex("PremiumPackageId");

                    b.HasIndex(new[] { "UserId" }, "UQ__User_Pre__B9BE370EE1A5DD97")
                        .IsUnique();

                    b.ToTable("User_Premium_Package", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.UserSpeakingSampleHistory", b =>
                {
                    b.Property<int>("UserSampleHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_sample_history_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserSampleHistoryId"));

                    b.Property<int>("TopicSampleId")
                        .HasColumnType("int")
                        .HasColumnName("topic_sample_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("UserSampleHistoryId")
                        .HasName("PK_UserSpeakingSampleHistory");

                    b.HasIndex("TopicSampleId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Speaking_Sample_History", (string)null);
                });

            modelBuilder.Entity("TestTag", b =>
                {
                    b.Property<Guid>("TestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("test_id");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    b.HasKey("TestId", "TagId")
                        .HasName("PK_TestTag");

                    b.HasIndex("TagId");

                    b.ToTable("Test_Tag", (string)null);
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.Comment", b =>
                {
                    b.HasOne("Prep4IELTS.Data.Entities.Comment", "ParentComment")
                        .WithMany("InverseParentComment")
                        .HasForeignKey("ParentCommentId")
                        .HasConstraintName("FK_Comment_ParentComment");

                    b.HasOne("Prep4IELTS.Data.Entities.Test", "Test")
                        .WithMany("Comments")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK_Comment_Test");

                    b.HasOne("Prep4IELTS.Data.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_User");

                    b.Navigation("ParentComment");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.FlashcardDetail", b =>
                {
                    b.HasOne("Prep4IELTS.Data.Entities.Flashcard", "Flashcard")
                        .WithMany("FlashcardDetails")
                        .HasForeignKey("FlashcardId")
                        .IsRequired()
                        .HasConstraintName("FK_FlashcardDetail_Flashcard");

                    b.Navigation("Flashcard");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.PartitionHistory", b =>
                {
                    b.HasOne("Prep4IELTS.Data.Entities.TestHistory", "TestHistory")
                        .WithMany("PartitionHistories")
                        .HasForeignKey("TestHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PartitionHistory_TestHistory");

                    b.HasOne("Prep4IELTS.Data.Entities.TestSectionPartition", "TestSectionPart")
                        .WithMany("PartitionHistories")
                        .HasForeignKey("TestSectionPartId")
                        .IsRequired()
                        .HasConstraintName("FK_PartitionHistory_SectionPartition");

                    b.Navigation("TestHistory");

                    b.Navigation("TestSectionPart");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.Question", b =>
                {
                    b.HasOne("Prep4IELTS.Data.Entities.TestSectionPartition", "TestSectionPart")
                        .WithMany("Questions")
                        .HasForeignKey("TestSectionPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Question_TestSectionPartition");

                    b.Navigation("TestSectionPart");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("Prep4IELTS.Data.Entities.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_QuestionAnswer_Question");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.SpeakingPart", b =>
                {
                    b.HasOne("Prep4IELTS.Data.Entities.SpeakingTopicSample", "TopicSample")
                        .WithMany("SpeakingParts")
                        .HasForeignKey("TopicSampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SpeakingPart_Sample");

                    b.Navigation("TopicSample");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.SpeakingTopicSample", b =>
                {
                    b.HasOne("Prep4IELTS.Data.Entities.SpeakingTopic", "Topic")
                        .WithMany("SpeakingTopicSamples")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SpeakingTopicSample_Topic");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.Test", b =>
                {
                    b.HasOne("Prep4IELTS.Data.Entities.TestCategory", "TestCategory")
                        .WithMany("Tests")
                        .HasForeignKey("TestCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Test_TestCategory");

                    b.HasOne("Prep4IELTS.Data.Entities.User", "User")
                        .WithMany("Tests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Test_User");

                    b.Navigation("TestCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.TestGrade", b =>
                {
                    b.HasOne("Prep4IELTS.Data.Entities.PartitionHistory", "PartitionHistory")
                        .WithMany("TestGrades")
                        .HasForeignKey("PartitionHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TestGrade_PartitionHistory");

                    b.HasOne("Prep4IELTS.Data.Entities.Question", "Question")
                        .WithMany("TestGrades")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_TestGrade_Question");

                    b.Navigation("PartitionHistory");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.TestHistory", b =>
                {
                    b.HasOne("Prep4IELTS.Data.Entities.ScoreCalculation", "ScoreCalculation")
                        .WithMany("TestHistories")
                        .HasForeignKey("ScoreCalculationId")
                        .HasConstraintName("FK_TestHistory_ScoreCaculation");

                    b.HasOne("Prep4IELTS.Data.Entities.TestCategory", "TestCategory")
                        .WithMany("TestHistories")
                        .HasForeignKey("TestCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_TestHistory_TestCategory");

                    b.HasOne("Prep4IELTS.Data.Entities.Test", "Test")
                        .WithMany("TestHistories")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TestHistory_Test");

                    b.HasOne("Prep4IELTS.Data.Entities.User", "User")
                        .WithMany("TestHistories")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_TestHitory_User");

                    b.Navigation("ScoreCalculation");

                    b.Navigation("Test");

                    b.Navigation("TestCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.TestSection", b =>
                {
                    b.HasOne("Prep4IELTS.Data.Entities.CloudResource", "CloudResource")
                        .WithMany("TestSections")
                        .HasForeignKey("CloudResourceId")
                        .HasConstraintName("FK_TestSection_CloudResource");

                    b.HasOne("Prep4IELTS.Data.Entities.Test", "Test")
                        .WithMany("TestSections")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TestSection_Test");

                    b.Navigation("CloudResource");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.TestSectionPartition", b =>
                {
                    b.HasOne("Prep4IELTS.Data.Entities.CloudResource", "CloudResource")
                        .WithMany("TestSectionPartitions")
                        .HasForeignKey("CloudResourceId")
                        .HasConstraintName("FK_TestSectionPartition_CloudResource");

                    b.HasOne("Prep4IELTS.Data.Entities.PartitionTag", "PartitionTag")
                        .WithMany("TestSectionPartitions")
                        .HasForeignKey("PartitionTagId")
                        .IsRequired()
                        .HasConstraintName("FK_TestSectionPartition_Tag");

                    b.HasOne("Prep4IELTS.Data.Entities.TestSection", "TestSection")
                        .WithMany("TestSectionPartitions")
                        .HasForeignKey("TestSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TestSectionPartition_TestSection");

                    b.Navigation("CloudResource");

                    b.Navigation("PartitionTag");

                    b.Navigation("TestSection");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.Transaction", b =>
                {
                    b.HasOne("Prep4IELTS.Data.Entities.PaymentType", "PaymentType")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_PaymentType");

                    b.HasOne("Prep4IELTS.Data.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_User");

                    b.HasOne("Prep4IELTS.Data.Entities.UserPremiumPackage", "UserPremiumPackage")
                        .WithMany("Transactions")
                        .HasForeignKey("UserPremiumPackageId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_UserPremiumPackage");

                    b.Navigation("PaymentType");

                    b.Navigation("User");

                    b.Navigation("UserPremiumPackage");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.User", b =>
                {
                    b.HasOne("Prep4IELTS.Data.Entities.SystemRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.UserFlashcard", b =>
                {
                    b.HasOne("Prep4IELTS.Data.Entities.Flashcard", "Flashcard")
                        .WithMany("UserFlashcards")
                        .HasForeignKey("FlashcardId")
                        .IsRequired()
                        .HasConstraintName("FK_UserFlashcard_Flashcard");

                    b.HasOne("Prep4IELTS.Data.Entities.User", "User")
                        .WithMany("UserFlashcards")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserFlashcard_User");

                    b.Navigation("Flashcard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.UserFlashcardProgress", b =>
                {
                    b.HasOne("Prep4IELTS.Data.Entities.FlashcardDetail", "FlashcardDetail")
                        .WithMany("UserFlashcardProgresses")
                        .HasForeignKey("FlashcardDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_UserFlashcardProgress_FlashcardDetail");

                    b.HasOne("Prep4IELTS.Data.Entities.UserFlashcard", "UserFlashcard")
                        .WithMany("UserFlashcardProgresses")
                        .HasForeignKey("UserFlashcardId")
                        .IsRequired()
                        .HasConstraintName("FK_UserFlashcardProgress_UserFlashcard");

                    b.Navigation("FlashcardDetail");

                    b.Navigation("UserFlashcard");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.UserPremiumPackage", b =>
                {
                    b.HasOne("Prep4IELTS.Data.Entities.PremiumPackage", "PremiumPackage")
                        .WithMany("UserPremiumPackages")
                        .HasForeignKey("PremiumPackageId")
                        .IsRequired()
                        .HasConstraintName("PK_UserPremiumPackage_PremiumPackage");

                    b.HasOne("Prep4IELTS.Data.Entities.User", "User")
                        .WithOne("UserPremiumPackage")
                        .HasForeignKey("Prep4IELTS.Data.Entities.UserPremiumPackage", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserPremiumPackage_User");

                    b.Navigation("PremiumPackage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.UserSpeakingSampleHistory", b =>
                {
                    b.HasOne("Prep4IELTS.Data.Entities.SpeakingTopicSample", "TopicSample")
                        .WithMany("UserSpeakingSampleHistories")
                        .HasForeignKey("TopicSampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserSpeakingSampleHistory_Sample");

                    b.HasOne("Prep4IELTS.Data.Entities.User", "User")
                        .WithMany("UserSpeakingSampleHistories")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserSpeakingSampleHistory_User");

                    b.Navigation("TopicSample");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestTag", b =>
                {
                    b.HasOne("Prep4IELTS.Data.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK_TestTag_Tag");

                    b.HasOne("Prep4IELTS.Data.Entities.Test", null)
                        .WithMany()
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("FK_TestTag_Test");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.CloudResource", b =>
                {
                    b.Navigation("TestSectionPartitions");

                    b.Navigation("TestSections");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.Comment", b =>
                {
                    b.Navigation("InverseParentComment");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.Flashcard", b =>
                {
                    b.Navigation("FlashcardDetails");

                    b.Navigation("UserFlashcards");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.FlashcardDetail", b =>
                {
                    b.Navigation("UserFlashcardProgresses");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.PartitionHistory", b =>
                {
                    b.Navigation("TestGrades");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.PartitionTag", b =>
                {
                    b.Navigation("TestSectionPartitions");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.PaymentType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.PremiumPackage", b =>
                {
                    b.Navigation("UserPremiumPackages");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.Question", b =>
                {
                    b.Navigation("QuestionAnswers");

                    b.Navigation("TestGrades");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.ScoreCalculation", b =>
                {
                    b.Navigation("TestHistories");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.SpeakingTopic", b =>
                {
                    b.Navigation("SpeakingTopicSamples");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.SpeakingTopicSample", b =>
                {
                    b.Navigation("SpeakingParts");

                    b.Navigation("UserSpeakingSampleHistories");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.SystemRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.Test", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("TestHistories");

                    b.Navigation("TestSections");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.TestCategory", b =>
                {
                    b.Navigation("TestHistories");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.TestHistory", b =>
                {
                    b.Navigation("PartitionHistories");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.TestSection", b =>
                {
                    b.Navigation("TestSectionPartitions");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.TestSectionPartition", b =>
                {
                    b.Navigation("PartitionHistories");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("TestHistories");

                    b.Navigation("Tests");

                    b.Navigation("Transactions");

                    b.Navigation("UserFlashcards");

                    b.Navigation("UserPremiumPackage");

                    b.Navigation("UserSpeakingSampleHistories");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.UserFlashcard", b =>
                {
                    b.Navigation("UserFlashcardProgresses");
                });

            modelBuilder.Entity("Prep4IELTS.Data.Entities.UserPremiumPackage", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
